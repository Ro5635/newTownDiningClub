# Infrastructure Template
#
# Defines the infrastructure required to run the fictional newTownDining Club
# This includes:
#   DynamoDB table
#   vendorEvent event bus
#   emailDispatch Queue
#   emailDispatch DLQ
#   emailDispatch DLQ CloudWatch Alarm
#   NewTownDiningCLub RestAPI and constituent resources
#   EventBridge vendor event Trigger Rules
#   Event handler functions associated with vendor events

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Mappings:
  prod:
    config:
      newTownDiningClubAPIDomainName: newtowndiningclub-api.projects.robertcurran.uk

Resources:

  vendorEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: vendorEventBus

  newTownDiningClubServiceTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: newTownDiningClubServiceTable
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1-PK
          AttributeType: S
        - AttributeName: GSI1-SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI-1
          KeySchema:
            - AttributeName: GSI1-PK
              KeyType: HASH
            - AttributeName: GSI1-SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: CostCentre
          Value: newTownDiningClubProject

  emailMessageDispatchQueue:
    Type: AWS::SQS::Queue
    Properties:
      # 1209600 is 14 days in seconds
      MessageRetentionPeriod: 1209600
      QueueName: emailMessageDispatchQueue
      ReceiveMessageWaitTimeSeconds: 5
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt emailMessageDispatchDeadLetterQueue.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 90

  emailMessageDispatchDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      # 1209600 is 14 days in seconds
      MessageRetentionPeriod: 1209600
      QueueName: emailMessageDispatchDeadLetterQueue
      ReceiveMessageWaitTimeSeconds: 5
      VisibilityTimeout: 90

  emailMessageDispatchDeadLetterQueueDepthAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: "Alarm if queue depth increases to more than 1 messages"
        Namespace: "AWS/SQS"
        MetricName: "ApproximateNumberOfMessagesVisible"
        Dimensions:
          - Name: "QueueName"
            Value: !GetAtt emailMessageDispatchDeadLetterQueue.QueueName
        Statistic: "Sum"
        Period: "300"
        EvaluationPeriods: "2"
        Threshold: "1"
        ComparisonOperator: "GreaterThanThreshold"
        AlarmActions:
          - !ImportValue environmentStack--RobertCurranSystemNotificationTopic

#
#  REST API:
#

  newTownDiningClubAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:
        AllowHeaders: "'Authorization, content-type'"
        AllowOrigin: "'*'"
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false # removes auth requirement from 'options' pre-flight requests
      Domain:
        DomainName: !FindInMap [prod, config, newTownDiningClubAPIDomainName]
        CertificateArn: !ImportValue environmentStack--RobertCurranUkSSLCertificateEUWest1
        Route53:
          HostedZoneId: !ImportValue environmentStack--RobertCurranUKHostedZoneID

  createVendor:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: build/adapters/rest/vendors/createNewVendor.createVendor
      Runtime: nodejs10.x
      CodeUri: .
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref vendorEventBus
        - DynamoDBCrudPolicy:
            TableName: !Ref newTownDiningClubServiceTable
      Description: >-
        Create a new Vendor rest resource
      MemorySize: 128
      Timeout: 60
      ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          NODE_ENV: dev
          NTDC_TABLE_NAME: !Ref newTownDiningClubServiceTable
          VENDOR_EVENT_BUS_NAME: !Ref vendorEventBus
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId: !Ref newTownDiningClubAPI
            Path: /vendor
            Method: POST


  externalTriggersVendorUpdated:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: build/adapters/rest/external_trigger/vendors/vendor_state_update.vendorUpdatedWebHookHandler
      Runtime: nodejs10.x
      CodeUri: .
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: "vendorEventBus"
        - DynamoDBCrudPolicy:
            TableName: !Ref newTownDiningClubServiceTable
      Description: >-
        Handles the vendor updated webHook
      MemorySize: 128
      Timeout: 60
      ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          NODE_ENV: dev
          NTDC_TABLE_NAME: !Ref newTownDiningClubServiceTable
          VENDOR_EVENT_BUS_NAME: !Ref vendorEventBus
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId: !Ref newTownDiningClubAPI
            Path: /webhooks/vendors
            Method: POST

#
#  Event Handler Functions
#

  vendorCreatedAddVendorToTrelloFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: build/adapters/event/vendor_created_add_vendor_to_trello.handler
      Runtime: nodejs10.x
      CodeUri: .
      Description: >-
        Adds Vendor To the vendorCreated list within Trello
      MemorySize: 128
      Timeout: 60
      ReservedConcurrentExecutions: 10

  vendorCreatedEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Triggers actions in response to vendorCreated Event"
      EventBusName: !Ref vendorEventBus
      EventPattern:
        detail:
          type:
            - "vendorCreated"
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt vendorCreatedAddVendorToTrelloFunction.Arn
          Id: vendorCreatedAddVendorToTrelloFunction

  PermissionInvokeLambdaForVendorCreatedAddVendorToTrelloFunction:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: vendorCreatedAddVendorToTrelloFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt vendorCreatedEventRule.Arn


  createVendorWelcomeEmailFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: build/adapters/event/create_vendor_welcome_email.handler
      Runtime: nodejs10.x
      CodeUri: .
      Description: >-
        Creates Welcome Email to Vendor
      MemorySize: 128
      Timeout: 60
      Policies:
        - DynamoDBCrudPolicy:
           TableName: !Ref newTownDiningClubServiceTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt emailMessageDispatchQueue.QueueName
      ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          NTDC_TABLE_NAME: !Ref newTownDiningClubServiceTable
          EMAIL_DISPATCH_QUEUE: !Ref emailMessageDispatchQueue
          NODE_ENV: dev

  newVendorAcceptedRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Triggers actions in response to a new Vendor being accepted"
      EventBusName: !Ref vendorEventBus
      EventPattern:
        detail:
          type:
            - "vendorUpdated"
          change:
            - "vendorState"
          previousState:
            - "pendingReview"
          newState:
            - "accepted"
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt createVendorWelcomeEmailFunction.Arn
          Id: createVendorWelcomeEmailFunction

  PermissionInvokeLambdaForSendVendorWelcomeEmailFunction:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: createVendorWelcomeEmailFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt newVendorAcceptedRule.Arn


  # The Queue Fetch batch Size and Concurrent Execution limit here are being used to keep
  # below the SES API Rate limit.
  dispatchEmailFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: build/adapters/event/dispatch_email.handler
      Runtime: nodejs10.x
      CodeUri: .
      Description: >-
        Dispatches Emails
      MemorySize: 128
      Timeout: 60
      Policies:
        - SESCrudPolicy:
            IdentityName: !ImportValue environmentStack--RobertCurranAutomatedEmailSESIdentity
        - DynamoDBCrudPolicy:
            TableName: !Ref newTownDiningClubServiceTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt emailMessageDispatchQueue.QueueName
        - SQSPollerPolicy:
            QueueName: !GetAtt emailMessageDispatchQueue.QueueName
      ReservedConcurrentExecutions: 1
      Environment:
        Variables:
          NTDC_TABLE_NAME: !Ref newTownDiningClubServiceTable
          EMAIL_DISPATCH_QUEUE: !Ref emailMessageDispatchQueue
          NODE_ENV: dev
      Events:
        dispatchEmailEventAvalibleOnQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt emailMessageDispatchQueue.Arn
            BatchSize: 1


